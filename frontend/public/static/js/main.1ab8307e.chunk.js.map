{"version":3,"sources":["components/Square.tsx","components/BingoBoard.tsx","store/actionTypes.tsx","webservices/bingoService.tsx","store/messages.tsx","store/cards.tsx","store/balls.tsx","components/BingoPage.tsx","App.tsx","serviceWorker.ts","store/configureStore.tsx","index.tsx"],"names":["FlexHeight","styled","Flex","props","height","Square","width","this","p","justifyContent","alignItems","className","ticketNumber","React","Component","actionTypes","BingoHeader","div","Wrapper","BingoBoard","bingo","alert","calledBalls","squares","rowNumber","columnCount","rowJSON","numBas","Object","values","t","numbers","map","i","push","Number","parseInt","num_value","toString","key","Array","_","reactKey","length","includes","rows","cardJSON","card","id","handleResponse","response","text","then","data","JSON","parse","ok","error","message","statusText","Promise","reject","getCards","cardCount","a","requestOptions","method","console","log","fetch","cards","getCalled","calls","danger","act","ALERT_DANGER","clear","ALERT_CLEAR","initialState","type","messageReducer","state","action","ALERT_SUCCESS","payload","fetchRequest","meta","CARD_REQUEST","fetchSuccess","CARD_SUCCESS","fetchFailure","CARD_FAILURE","requestNumbers","dispatch","setTimeout","cardReducer","BALL_REQUEST","BALL_SUCCESS","BALL_FAILURE","requestCalled","balls","ballReducer","Body","BackgroundFlex","BingoPage","bingoBoards","temp","window","params","URLSearchParams","location","search","has","cartelle","get","split","c","interval","setInterval","setState","time","clearInterval","flexDirection","Container","Row","justify","align","Spinner","connect","App","Boolean","hostname","match","store","reducers","loggerMiddleware","createLogger","middleware","thunk","rootReducer","combineReducers","createStore","compose","applyMiddleware","configureStore","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1ab8307e.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Flex } from 'rebass';\n\nconst FlexHeight = styled(Flex)`\n  height: ${(props) => props.height};\n  min-width: 0;\n  height: 42px;\n  margin: 1px !important;\n  padding: 4px;\n  display: flex;\n  width: 42px;\n  justify-content: center;\n  align-items: center;\n`;\n\ninterface ISquareProps {\n    width?: string,\n    height?: string,\n    className: string,\n    ticketNumber: string,\n}\nclass Square extends React.Component<ISquareProps> {\n\n  width = () => this.props.width || \"42px\";\n  height = () => this.props.height || \"42px\";\n\n  render() {\n    return (\n      <FlexHeight\n        height={this.height()}\n        width={this.width()}\n        p={1}\n        justifyContent='center'\n        alignItems='center'\n        className={this.props.className}\n      >\n          {this.props.ticketNumber}\n      </FlexHeight>\n    );\n  }\n}\nexport default Square;\n","import React from 'react';\nimport { Flex } from 'rebass';\nimport styled from 'styled-components';\nimport Square from './Square';\nimport { ICard, IRow } from '../store/cards';\nimport { IBall } from '../store/balls';\n\n\n// Create a Title component that'll render an <h1> tag with some styles\nconst BingoHeader = styled.div`\n\twidth: 100%;\n\tmargin-left: 4%;\n\tmargin-top: 2%;\n`\n// Create a Wrapper component that'll render a <section> tag with some styles\nconst Wrapper = styled.div`\n    \n    padding-top:2.3rem;\n    padding-left:1.65rem;\n    padding-right:1.5rem;\n    background: #d6d2cb center url(\"aupcard1.png\");\n    background-size:100% 100%;\n    background-repeat:no-repeat;\n    height: 250px;\n    border-radius: 15px;\n    width: 350px;\n`;\nconst Button = styled.div`\n    cursor: pointer;\n    height:50%;\n`\n// interface IGameProps {\n//     rows: string,\n// }\ninterface IBingoBoardProps {\n    columnCount?: number,\n    rowJSON?: string,\n    calledBalls?: IBall[],\n    card: ICard,\n}\n\nclass BingoBoard extends React.Component<IBingoBoardProps> {\n\n    bingo = () => {\n        alert(\"BINGO PRESSED!\");\n    }\n\t\n    calledBalls = [1,2]\n   \n\t\n    squares = (rowNumber = \"0\", columnCount: number, rowJSON: IRow) => {\n        const numBas = Object.values(rowJSON);\n       \n\tconst calledBalls = this.props.calledBalls!;\n\tconst t = Object.values(calledBalls);\n\tvar numbers = [-1];\n\tt.map(i =>  numbers.push(Number.parseInt((i.num_value!.toString()))));\n        \n     \n\treturn (\n            <Flex justifyContent='center' key={\"Row(\" + rowNumber + \")\"} className=\"aqua\">\n                {[...Array(columnCount)].map((_, i) => {\n                    const reactKey = \"Square(\" + rowNumber + \",\" + i + \")\";\n                    let ticketNumber = numBas[i].toString();\n\t\t           \t              \n                    if (numbers && numbers.length && numbers.includes(Number.parseInt(ticketNumber, 10))) {\n                        return (<Square ticketNumber={ticketNumber} key={reactKey} className=\"ticket-number called\" />)\n                    }\n                    return (\n                    <Square\n                        width=\"42px\"\n                        ticketNumber={ticketNumber}\n                        key={reactKey}\n                        className=\"ticket-number\"\n                    />\n                    )\n                })}\n            </Flex>\n            );\n    };\n\n   \n\n    rows = (cardJSON: IRow[], columnCount = 9) => {\n        return [...Array(cardJSON.length)].map((_, i) => this.squares(i.toString(), columnCount, cardJSON[i]))\n    }\n\n\n    render() {\n        return this.props.card && this.props.card.rows ?\n            (\n                <Wrapper className=\"align-content-center mx-3 mb-5\">\n                    <BingoHeader>\n                   \t<h3>{this.props.card.id}</h3>    \n                    </BingoHeader>\n                    {this.rows(this.props.card.rows, 9)}\n                    \n                </Wrapper>\n            )\n            : (\n                <h3>N/A</h3>\n            );\n    }\n}\nexport default BingoBoard;\n","export enum actionTypes {\n    /* Messaging system */\n    ALERT_SUCCESS = 'ALERT_SUCCESS',\n    ALERT_DANGER = 'ALERT_DANGER',\n    ALERT_CLEAR = 'ALERT_CLEAR',\n    /* Bingo cards */\n    CARD_REQUEST = 'CARD_REQUEST',\n    CARD_SUCCESS = 'CARD_SUCCESS',\n    CARD_FAILURE = 'CARD_FAILURE',\n\n    BALL_REQUEST = 'BALL_REQUEST',\n    BALL_SUCCESS = 'BALL_SUCCESS',\n    BALL_FAILURE = 'BALL_FAILURE',\n\n}\n\nexport interface IResponse {\n    statusText: string,\n    ok: boolean,\n    text(): Promise<string>,\n}\n\n/* Global parsing and error handling for AJAX requests */\nexport const handleResponse = (response: IResponse) => {\n    return response.text().then((text) => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n        return data;\n    });\n};\n","import { handleResponse } from '../store/actionTypes';\n\nexport const getCards = async (cardCount: number) => {\n    const requestOptions = {\n        method: 'GET',\n    };\n    console.log(\"Requesting cardCount\", cardCount);\n    const uri = \"http://localhost:8000/play/cards\";\n    return fetch(uri, requestOptions)\n        .then(handleResponse)\n        .then((cards) => cards);\n}\n\nexport const getCalled = async (cardCount: number) => {\n    const requestOptions = {\n        method: 'GET',\n    };\n    console.log(\"Requesting cardCount\", cardCount);\n    const uri = \"http://localhost:8000/play/balls\";\n    return fetch(uri, requestOptions)\n        .then(handleResponse)\n        .then((calls) => calls);\n}\n","import { action as act } from 'typesafe-actions'\nimport { actionTypes } from './actionTypes';\nimport { Reducer } from 'redux'\n\n/* Message Actions */\n\nexport const success = (message: string) => act(actionTypes.ALERT_SUCCESS, message);\nexport const danger = (message: string) => act(actionTypes.ALERT_DANGER, message)\nexport const clear = () => act(actionTypes.ALERT_CLEAR);\n\nexport interface IMessage {\n    readonly type: string,\n    readonly message: string\n}\nconst initialState = {\n    message: \"\",\n    type: \"alert-clear\",\n}\n\n/* Message Reducer */\nconst messageReducer: Reducer<IMessage> = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ALERT_SUCCESS:\n            return {\n                message: action.payload,\n                type: 'alert-success',\n            };\n        case actionTypes.ALERT_DANGER:\n            return {\n                message: action.payload,\n                type: 'alert-danger',\n            };\n        case actionTypes.ALERT_CLEAR:\n            return {\n                message: action.payload,\n                type: 'alert-clear',\n            };\n\n        default:\n            return state\n    }\n}\nexport { messageReducer }\n","import { actionTypes } from './actionTypes';\nimport { action as act } from 'typesafe-actions'\nimport { getCards, getCalled } from '../webservices/bingoService';\nimport { Reducer, AnyAction } from 'redux'\nimport { Dispatch } from 'react';\nimport { danger, clear } from './messages';\n\n/* Card Interface */\n\nexport interface ICardArray {\n    readonly [key: number]: ICard,\n    readonly cards: ICard[],\n}\nexport interface IRow {\n    readonly b_val: string,\n    readonly i_val: string,\n    readonly n_val: string,\n    readonly g_val: string,\n    readonly o_val: string,\n    readonly v0_val: string,\n    readonly v1_val: string,\n    readonly v2_val: string,\n    readonly v3_val: string,\n\n\n}\nexport interface ICard {\n    readonly id: number,\n    readonly [key: number]: IRow,\n    readonly rows: IRow[],\n}\n\n/* Card Actions */\n\nconst fetchRequest = (cardCount: number, meta: string) => act(actionTypes.CARD_REQUEST, cardCount, meta)\nconst fetchSuccess = (data: ICardArray) => act(actionTypes.CARD_SUCCESS, data)\nconst fetchFailure = (error: string) => act(actionTypes.CARD_FAILURE, error)\n\n\nexport const requestNumbers = async (cardCount = 1, dispatch: Dispatch<AnyAction>) => {\n    dispatch(fetchRequest(cardCount, \"Requesting cards\"))\n    getCards(cardCount)\n        .then(\n            (payload) => {\n                return dispatch(fetchSuccess(payload));\n            },\n            (error) => {\n                dispatch(fetchFailure(error.toString())); // for debugging with redux-logger\n                dispatch(danger(error.toString())); // sends error to the UI\n                setTimeout(() => {\n                    dispatch(clear()); // clear error after 10 seconds from UI\n                  }, 10000);\n            },\n        );\n}\n\n/* Reducers map actions to state, set the default here */\n\nconst initialState = {\n    cards: [],\n}\n\n/* Card Reducer */\nexport const cardReducer: Reducer<ICardArray> = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.CARD_REQUEST:\n            return {\n                ...state,\n            };\n        case actionTypes.CARD_SUCCESS:\n            return {\n                ...state,\n                cards: action.payload,\n            };\n        case actionTypes.CARD_FAILURE:\n            return {\n                cards: [],\n                error: action.error,\n            };\n        default:\n            return state;\n    }\n};\n","import { actionTypes } from './actionTypes';\nimport { action as act } from 'typesafe-actions'\nimport { getCards, getCalled } from '../webservices/bingoService';\nimport { Reducer, AnyAction } from 'redux'\nimport { Dispatch } from 'react';\nimport { danger, clear } from './messages';\n\n/* Card Interface */\n\nexport interface IBallArray {\n    readonly balls?: IBall[],\n}\n\nexport interface IBall {\n    readonly num_value?: number\n}\n/* Card Actions */\n\nconst fetchRequest = (cardCount: number, meta: string) => act(actionTypes.BALL_REQUEST, cardCount, meta)\nconst fetchSuccess = (data: IBallArray) => act(actionTypes.BALL_SUCCESS, data)\nconst fetchFailure = (error: string) => act(actionTypes.BALL_FAILURE, error)\n\n\nexport const requestCalled = async (cardCount = 1, dispatch: Dispatch<AnyAction>) => {\n    dispatch(fetchRequest(cardCount, \"Requesting balls\"))\n    getCalled(cardCount)\n        .then(\n            (payload) => {\n                return dispatch(fetchSuccess(payload));\n            },\n            (error) => {\n                dispatch(fetchFailure(error.toString())); // for debugging with redux-logger\n                dispatch(danger(error.toString())); // sends error to the UI\n                setTimeout(() => {\n                    dispatch(clear()); // clear error after 10 seconds from UI\n                  }, 10000);\n            },\n        );\n}\n\n/* Reducers map actions to state, set the default here */\n\nconst initialState = {\n    balls: [],\n}\n\n/* Card Reducer */\nexport const ballReducer: Reducer<IBallArray> = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.BALL_REQUEST:\n            return {\n                ...state,\n            };\n        case actionTypes.BALL_SUCCESS:\n            return {\n                ...state,\n                balls: action.payload,\n            };\n        case actionTypes.BALL_FAILURE:\n            return {\n                balls: [],\n                error: action.error,\n            };\n        default:\n            return state;\n    }\n};\n","import * as React from 'react'\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { Flex } from 'rebass';\nimport { Container, Row, Spinner } from 'reactstrap';\nimport { IApplication, IConnectedReduxProps } from '../store/configureStore';\nimport BingoBoard from './BingoBoard';\nimport { requestNumbers} from '../store/cards';\nimport { requestCalled } from '../store/balls';\nimport './styles/App.css';\nimport { Observable } from 'rxjs';\nimport { interval } from 'rxjs';\nimport './styles/bootstrap.css';\n\nconst Body = styled.div`\n    min-height:600px;\n`\nconst BackgroundFlex = styled(Flex)`\n    background: rgba(0, 0, 0, 0) linear-gradient(to right, rgb(67, 198, 172), \\\n    rgb(25, 22, 84)) repeat scroll 0% 0%;\n    min-height: 680px;\n    color:white;\n    padding-top:24px;\n    flex-direction:column;\n`\nclass BingoPage extends React.Component<IApplication & IConnectedReduxProps> {\n\n    getCards = (cardCount = 2) => requestNumbers(cardCount, this.props.dispatch);\n    getCalled = (cardCount = 2) => requestCalled(cardCount, this.props.dispatch);\n\n\n    bingoBoards = (cardCount = 2) => {\n        const { cards } = this.props.cards;\n\tconst { balls } = this.props.balls;\n\tconst temp: any = window;\n\t\n\tconst params = new URLSearchParams(temp.location.search)\n\t\n        const numbers=[]\n        if(params.has('cartelle')) {\n\t  \n           const cartelle = params!.get('cartelle')!.split(',')\n\t   for(let i = 0; i < cartelle.length; i++) {\n\t\t\n              const c = Number.parseInt(cartelle[i])\n              console.log(c)\n\t      numbers.push(c)\n           }\n\t}\n                    \n        return numbers.map( (i) => {\n            return (\n                <BingoBoard\n                    key={\"Card-\" + i.toString()}\n                    card={cards[i-1]}\n\t\t    calledBalls={balls}           \n                />\n                );\n        });\n    };//CREATE BALLS.TSX WITH CALLED BALLS\n    interval: any;\n    componentDidMount() {\n        this.getCards(this.props.cards.cards.length || 9);\n        this.interval = setInterval(() => this.setState({ time: this.getCalled(1) }), 1000);\n    }\n\n    componentWillUnmount() {\n       clearInterval(this.interval);\n    }\n\n\n    render() {\n        return (\n        <BackgroundFlex flexDirection=\"column\" justifyContent=\"center\">\n            <Container>\n                <Row className=\"justify-content-center\">\n                    <div className=\"text-center\">\n                        { this.props.message && this.props.message.type &&\n                            <div className={`alert ${this.props.message.type}`}>\n                                {this.props.message.message}\n                            </div>\n                        }\n                    </div>\n                </Row>\n            </Container>\n            {this.props.cards && this.props.cards.cards ? (\n            <Container justify='space-evenly' className='pb-3' >\n                <div className=\"row\">\n                    <div className=\"col-md-9\">\n                        <div className=\"row d-flex flex-row justify-content-center align-items-center\">\n                            {this.bingoBoards(this.props.cards.cards.length)}\n                        </div>\n                    </div>\n                    <div className=\"col-md-3\">Ball Board</div>\n                </div>\n            </Container>) :\n            (<Container align='center' className='p-4' >\n                <div className=\"row\">\n                    <Body className=\"col-md-12\">\n                       <Spinner/> \n                    </Body>\n                </div>\n            </Container>)}\n        </BackgroundFlex>\n        )\n    }\n}\nfunction mapStateToProps(state: IApplication) {\n    const { message, cards, balls} = state;\n    return {\n\tballs,\n        cards,\n        message,\n    }\n}\nexport default connect(mapStateToProps)(BingoPage);\n","import React from 'react';\nimport BingoPage from './components/BingoPage';\n\nfunction App() {\n  return (\n    <BingoPage />\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, compose, applyMiddleware, combineReducers, Dispatch, Action, AnyAction } from 'redux'\nimport { createLogger } from 'redux-logger';\nimport thunk from \"redux-thunk\";\nimport { messageReducer, IMessage } from './messages';\nimport { cardReducer, ICardArray } from './cards';\nimport { IBallArray, ballReducer } from './balls';\n\nexport interface IConnectedReduxProps<A extends Action = AnyAction> {\n    dispatch: Dispatch<A>\n}\n\nexport interface IApplication {\n    message: IMessage,\n    cards: ICardArray,\n    balls: IBallArray,\n}\n\nconst configureStore = () => {\n    const reducers = {\n        cards: cardReducer,\n        message: messageReducer,\n\tballs: ballReducer\n    };\n    const loggerMiddleware = createLogger();\n    const middleware = [\n        thunk,\n        loggerMiddleware,\n    ];\n    const rootReducer = combineReducers({\n        ...reducers,\n    });\n    return createStore(\n        rootReducer,\n        compose(applyMiddleware(...middleware)),\n    );\n }\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\nconst store = configureStore();\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n    (\n    <Provider store={store}>\n        <App />\n    </Provider>\n    ),\n    rootElement);\nserviceWorker.unregister();\n"],"sourceRoot":""}